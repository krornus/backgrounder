!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddParser	bgservice.py	/^    def AddParser(self, func, desc):$/;"	m	class:ImagePathParser
AppendImagePath	bgserver.py	/^    def AppendImagePath(self, uris):$/;"	m	class:BackgrounderService
BackgroundConfig	bgconf.py	/^class BackgroundConfig(object):$/;"	c
BackgroundConfig	bgserver.py	/^from bgconf import BackgroundConfig$/;"	i
BackgrounderService	bgserver.py	/^class BackgrounderService(object):$/;"	c
BackgrounderService	bgservice.py	/^class BackgrounderService(object):$/;"	c
BeautifulSoup	imageparsers/blueshots.py	/^from bs4 import BeautifulSoup$/;"	i
BeautifulSoup	imageparsers/google.py	/^from bs4 import BeautifulSoup$/;"	i
BeautifulSoup	imageparsers/imgur.py	/^from bs4 import BeautifulSoup$/;"	i
BeautifulSoup	imageparsers/reddit_api.py	/^from bs4 import BeautifulSoup$/;"	i
BlueShotsParser	bgserver.py	/^from imageparsers.blueshots import BlueShotsParser$/;"	i
BlueShotsParser	imageparsers/blueshots.py	/^class BlueShotsParser(object):$/;"	c
ConfigParser	bgconf.py	/^from ConfigParser import ConfigParser$/;"	i
Current	bgserver.py	/^    def Current(self):$/;"	m	class:BackgrounderService
DownloadImage	bgimage.py	/^    def DownloadImage(self, uri, fn):$/;"	m	class:ImagePath
Exit	bgserver.py	/^    def Exit(self):$/;"	m	class:BackgrounderService
GLib	bgserver.py	/^from gi.repository import GLib$/;"	i
GetParsers	bgimage.py	/^    def GetParsers(self):$/;"	m	class:ImagePath
GetSanitizedPaths	bgserver.py	/^    def GetSanitizedPaths(self, uris):$/;"	m	class:BackgrounderService
GetSetting	bgserver.py	/^    def GetSetting(self, key):$/;"	m	class:BackgrounderService
GoogleParser	bgserver.py	/^from imageparsers.google import GoogleParser$/;"	i
GoogleParser	imageparsers/google.py	/^class GoogleParser(object):$/;"	c
Image	bgimage.py	/^from PIL import Image$/;"	i
Image	imageparsers/google.py	/^from PIL import Image$/;"	i
ImagePath	bgimage.py	/^class ImagePath(object):$/;"	c
ImagePath	bgserver.py	/^from bgimage import ImagePath$/;"	i
ImagePathParser	bgservice.py	/^class ImagePathParser(object):$/;"	c
ImgurParser	bgserver.py	/^from imageparsers.imgur import ImgurParser$/;"	i
ImgurParser	imageparsers/blueshots.py	/^from imgur import ImgurParser$/;"	i
ImgurParser	imageparsers/imgur.py	/^class ImgurParser(object):$/;"	c
ListImages	bgserver.py	/^    def ListImages(self):$/;"	m	class:BackgrounderService
ListSettings	bgserver.py	/^    def ListSettings(self):$/;"	m	class:BackgrounderService
LoadConfig	bgserver.py	/^    def LoadConfig(self):$/;"	m	class:BackgrounderService
LoadImageList	bgserver.py	/^    def LoadImageList(self, fn=None):$/;"	m	class:BackgrounderService
LoadImageListHelper	bgserver.py	/^    def LoadImageListHelper(self, fn=None):$/;"	m	class:BackgrounderService
Next	bgserver.py	/^    def Next(self):$/;"	m	class:BackgrounderService
OnCycleChanged	bgserver.py	/^    def OnCycleChanged(self):$/;"	m	class:BackgrounderService
OnShuffleChanged	bgserver.py	/^    def OnShuffleChanged(self):$/;"	m	class:BackgrounderService
OnWriteBackChanged	bgserver.py	/^    def OnWriteBackChanged(self):$/;"	m	class:BackgrounderService
PATH	tests/test.py	/^from sys import path as PATH$/;"	i
Parse	bgservice.py	/^    def Parse$/;"	m	class:ImagePathParser
ParseDirectoryPath	bgimage.py	/^    def ParseDirectoryPath(self, uri):$/;"	m	class:ImagePath
ParseImagePath	bgimage.py	/^    def ParseImagePath(self, uri):$/;"	m	class:ImagePath
ParseImageUrl	bgimage.py	/^    def ParseImageUrl(self, uri):$/;"	m	class:ImagePath
ParseUri	bgimage.py	/^    def ParseUri(self, uri):$/;"	m	class:ImagePath
Path	bgimage.py	/^from pathlib import Path$/;"	i
Pause	bgserver.py	/^    def Pause(self):$/;"	m	class:BackgrounderService
Previous	bgserver.py	/^    def Previous(self):$/;"	m	class:BackgrounderService
R_OK	bgserver.py	/^from os import path, remove, access, R_OK, W_OK$/;"	i
RedditApi	imageparsers/reddit.py	/^from reddit_api import RedditApi$/;"	i
RedditApi	imageparsers/reddit_api.py	/^class RedditApi:$/;"	c
RedditParser	bgserver.py	/^from imageparsers.reddit import RedditParser$/;"	i
RedditParser	imageparsers/reddit.py	/^class RedditParser(object):$/;"	c
RedditUrl	imageparsers/reddit_api.py	/^class RedditUrl(object):$/;"	c
Refresh	bgserver.py	/^    def Refresh(self):$/;"	m	class:BackgrounderService
RefreshActivePaths	bgserver.py	/^    def RefreshActivePaths(self):$/;"	m	class:BackgrounderService
Reload	bgserver.py	/^    def Reload(self):$/;"	m	class:BackgrounderService
Reload	bgservice.py	/^    def Reload(self):$/;"	m	class:BackgrounderService
Remove	bgserver.py	/^    def Remove(self):$/;"	m	class:BackgrounderService
RequiredLength	backgrounder.py	/^    class RequiredLength(argparse.Action):$/;"	c	function:append_nargs_range
ResetTimer	bgserver.py	/^    def ResetTimer(self):$/;"	m	class:BackgrounderService
Resume	bgserver.py	/^    def Resume(self):$/;"	m	class:BackgrounderService
Save	bgserver.py	/^    def Save(self, fn):$/;"	m	class:BackgrounderService
SaveImageList	bgserver.py	/^    def SaveImageList(self, fn=None):$/;"	m	class:BackgrounderService
SavePathState	bgserver.py	/^    def SavePathState(self):$/;"	m	class:BackgrounderService
SessionBus	backgrounder.py	/^from pydbus import SessionBus$/;"	i
SessionBus	bgserver.py	/^from pydbus import SessionBus$/;"	i
SetBackground	bgimage.py	/^    def SetBackground(self, fn, fill):$/;"	m	class:ImagePath
SetImagePath	bgserver.py	/^    def SetImagePath(self, arg):$/;"	m	class:BackgrounderService
SetSetting	bgserver.py	/^    def SetSetting(self, key, value):$/;"	m	class:BackgrounderService
ShufflePaths	bgserver.py	/^    def ShufflePaths(self, paths):$/;"	m	class:BackgrounderService
StringIO	bgserver.py	/^from StringIO import StringIO$/;"	i
TestPathUtils	tests/test.py	/^class TestPathUtils(unittest.TestCase):$/;"	c
Timer	bgserver.py	/^from threading import Timer$/;"	i
Undo	bgserver.py	/^    def Undo(self):$/;"	m	class:BackgrounderService
UndoPathChange	bgserver.py	/^    def UndoPathChange(self, args):$/;"	m	class:BackgrounderService
UndoRemove	bgserver.py	/^    def UndoRemove(self, args):$/;"	m	class:BackgrounderService
UndoSetting	bgserver.py	/^    def UndoSetting(self, args):$/;"	m	class:BackgrounderService
UpdateBackground	bgserver.py	/^    def UpdateBackground(self):$/;"	m	class:BackgrounderService
UpdateImagePath	bgserver.py	/^    def UpdateImagePath(self, uris, parsed=False, append=True):$/;"	m	class:BackgrounderService
UserAgent	imageparsers/reddit_api.py	/^from fake_useragent import UserAgent$/;"	i
W_OK	bgserver.py	/^from os import path, remove, access, R_OK, W_OK$/;"	i
W_OK	pathutils.py	/^from os import path, access, W_OK$/;"	i
W_OK	tests/test.py	/^from os import path, W_OK$/;"	i
__call__	backgrounder.py	/^        def __call__(self, parser, args, values, option_string=None):$/;"	m	class:append_nargs_range.RequiredLength	file:
__init__	bgconf.py	/^    def __init__(self, cfg=None, callbacks={}, defaults={}, types={}, writeback=False): $/;"	m	class:BackgroundConfig
__init__	bgimage.py	/^    def __init__(self, tmp, parsers=[]):$/;"	m	class:ImagePath
__init__	bgserver.py	/^    def __init__(self, loop, cfgs=None):$/;"	m	class:BackgrounderService
__init__	bgservice.py	/^    def __init__(self, parsers):$/;"	m	class:ImagePathParser
__init__	imageparsers/imgur.py	/^    def __init__(self, min_height=0, min_width=0, $/;"	m	class:ImgurParser
__init__	imageparsers/reddit_api.py	/^    def __init__(self, sr, sort="top", time="month", after="", query="", flair="", self_post="no", count="50", before=""):$/;"	m	class:RedditUrl
__init__	imageparsers/reddit_api.py	/^    def __init__(self, url):$/;"	m	class:RedditApi
access	bgserver.py	/^from os import path, remove, access, R_OK, W_OK$/;"	i
access	pathutils.py	/^from os import path, access, W_OK$/;"	i
after	imageparsers/reddit_api.py	/^    def after(self):$/;"	m	class:RedditUrl
after	imageparsers/reddit_api.py	/^    def after(self, value):$/;"	m	class:RedditUrl
append_nargs_range	backgrounder.py	/^def append_nargs_range(low,high):$/;"	f
argparse	backgrounder.py	/^import argparse$/;"	i
argparse	imageparsers/imgur.py	/^import argparse$/;"	i
args	backgrounder.py	/^    args = parser.parse_args()$/;"	v
b	imageparsers/blueshots.py	/^    b = BlueShotsParser()$/;"	v	class:BlueShotsParser
before	imageparsers/reddit_api.py	/^    def before(self):$/;"	m	class:RedditUrl
before	imageparsers/reddit_api.py	/^    def before(self, value):$/;"	m	class:RedditUrl
bgmode	bgtypechecker.py	/^def bgmode(s):$/;"	f
bool	bgtypechecker.py	/^def bool(s):$/;"	f
bus	backgrounder.py	/^    bus = SessionBus()$/;"	v
cStringIO	imageparsers/google.py	/^import cStringIO$/;"	i
change_page	imageparsers/reddit_api.py	/^    def change_page(self, url):$/;"	m	class:RedditApi
check_url	imageparsers/blueshots.py	/^from validators import url as check_url$/;"	i
check_url	imageparsers/google.py	/^from validators import url as check_url$/;"	i
check_url	imageparsers/imgur.py	/^from validators import url as check_url$/;"	i
connected	bgimage.py	/^    def connected(self, host="8.8.8.8", port=53, timeout=2):$/;"	m	class:ImagePath
construct_query	imageparsers/reddit_api.py	/^    def construct_query(self):$/;"	m	class:RedditUrl
daemon	backgrounder.py	/^import daemon$/;"	i
dimensions	imageparsers/google.py	/^    def dimensions(self, raw):$/;"	m	class:GoogleParser
encode	imageparsers/google.py	/^from urllib import quote_plus as encode$/;"	i
exceptions	bgimage.py	/^from requests import get, exceptions$/;"	i
existing_dir	tests/test.py	/^    existing_dir = path.abspath(".\/")$/;"	v	class:TestPathUtils
existing_file	tests/test.py	/^    existing_file = path.abspath(__file__)$/;"	v	class:TestPathUtils
expand_links	imageparsers/google.py	/^    def expand_links(self, links):$/;"	m	class:GoogleParser
expandpath	pathutils.py	/^def expandpath(fn):$/;"	f
filedir	bgtypechecker.py	/^def filedir(s):$/;"	f
float	bgtypechecker.py	/^def float(s):$/;"	f
g	imageparsers/google.py	/^    g = GoogleParser()$/;"	v	class:GoogleParser
get	bgconf.py	/^    def get(self, key):$/;"	m	class:BackgroundConfig
get	bgimage.py	/^from requests import get, exceptions$/;"	i
get_bool	bgconf.py	/^    def get_bool(self, key):$/;"	m	class:BackgroundConfig
get_float	bgconf.py	/^    def get_float(self, key):$/;"	m	class:BackgroundConfig
get_images	imageparsers/blueshots.py	/^    def get_images(self, url):$/;"	m	class:BlueShotsParser
get_images	imageparsers/google.py	/^    def get_images(self, url):$/;"	m	class:GoogleParser
get_images	imageparsers/imgur.py	/^    def get_images(self, url):$/;"	m	class:ImgurParser
get_images	imageparsers/reddit.py	/^    def get_images(self, uri):$/;"	m	class:RedditParser
get_images	imageparsers/reddit_api.py	/^    def get_images(self, url=None):$/;"	m	class:RedditApi
get_int	bgconf.py	/^    def get_int(self, key):$/;"	m	class:BackgroundConfig
get_links	imageparsers/google.py	/^    def get_links(self, url):$/;"	m	class:GoogleParser
get_next	imageparsers/reddit_api.py	/^    def get_next(self, url=None):$/;"	m	class:RedditApi
get_prev	imageparsers/reddit_api.py	/^    def get_prev(self, url=None):$/;"	m	class:RedditApi
handle_append_images	backgrounder.py	/^def handle_append_images(images):$/;"	f
handle_set_images	backgrounder.py	/^def handle_set_images(images):$/;"	f
handle_settings	backgrounder.py	/^def handle_settings(settings):$/;"	f
iglob	bgimage.py	/^from glob import iglob$/;"	i
images	imageparsers/google.py	/^    def images(self, url):$/;"	m	class:GoogleParser
images	imageparsers/reddit_api.py	/^		images = []$/;"	v	class:RedditApi
imghdr	bgimage.py	/^import imghdr$/;"	i
imgur	imageparsers/blueshots.py	/^    imgur = ImgurParser()$/;"	v	class:BlueShotsParser
int	bgtypechecker.py	/^def int(s):$/;"	f
isimage	bgimage.py	/^    def isimage(self, path):$/;"	m	class:ImagePath
json	imageparsers/imgur.py	/^import json$/;"	i
links	imageparsers/reddit_api.py	/^		links = self.soup.find_all("div", {"class":"listing search-result-listing"})$/;"	v	class:RedditApi
lsoup	imageparsers/reddit_api.py	/^		lsoup = BeautifulSoup(str(links), "lxml")$/;"	v	class:RedditApi
non_existing_path	tests/test.py	/^    non_existing_path = existing_dir + "\/invalid_path"$/;"	v	class:TestPathUtils
open_subreddit	imageparsers/reddit_api.py	/^    def open_subreddit(sr, sort="top", time="month", after="", query=""):$/;"	m	class:RedditApi
open_url	imageparsers/reddit_api.py	/^    def open_url(self, url):$/;"	m	class:RedditApi
parse	bgconf.py	/^    def parse(self, cfg, defaults):$/;"	m	class:BackgroundConfig
parser	backgrounder.py	/^    parser = argparse.ArgumentParser()$/;"	v
path	backgrounder.py	/^from os import path$/;"	i
path	bgconf.py	/^from os import path$/;"	i
path	bgimage.py	/^from os import path, remove$/;"	i
path	bgserver.py	/^from os import path, remove, access, R_OK, W_OK$/;"	i
path	pathutils.py	/^from os import path, access, W_OK$/;"	i
path	tests/test.py	/^from os import path, W_OK$/;"	i
pathutils	tests/test.py	/^import pathutils$/;"	i
q	imageparsers/google.py	/^    q = encode(raw_input("enter query"))$/;"	v	class:GoogleParser
quote	imageparsers/reddit_api.py	/^from urllib import quote$/;"	i
r	imageparsers/reddit.py	/^    r = RedditParser()$/;"	v	class:RedditParser
r	imageparsers/reddit_api.py	/^    r = RedditApi("https:\/\/www.reddit.com\/r\/wallpapers\/")$/;"	v
random	bgserver.py	/^import random$/;"	i
re	imageparsers/blueshots.py	/^import re$/;"	i
re	imageparsers/google.py	/^import re$/;"	i
re	imageparsers/imgur.py	/^import re$/;"	i
re	imageparsers/reddit_api.py	/^import re$/;"	i
remove	bgimage.py	/^from os import path, remove$/;"	i
remove	bgserver.py	/^from os import path, remove, access, R_OK, W_OK$/;"	i
requests	imageparsers/blueshots.py	/^import requests$/;"	i
requests	imageparsers/google.py	/^import requests$/;"	i
requests	imageparsers/imgur.py	/^import requests$/;"	i
requests	imageparsers/reddit_api.py	/^import requests$/;"	i
res	backgrounder.py	/^        res = service.Remove()$/;"	v
results	imageparsers/reddit_api.py	/^		results = [ l['href'] for l in lsoup.find_all("a", {"class":"search-link"})]$/;"	v	class:RedditApi
run	backgrounder.py	/^from bgserver import run$/;"	i
run	bgserver.py	/^def run():$/;"	f
save	bgconf.py	/^    def save(self, fn=None):$/;"	m	class:BackgroundConfig
service	backgrounder.py	/^        service = bus.get("com.krornus.dbus.Backgrounder")$/;"	v
service	backgrounder.py	/^    service = None$/;"	v
set	bgconf.py	/^    def set(self, key, value):$/;"	m	class:BackgroundConfig
sleep	bgserver.py	/^from time import sleep$/;"	i
socket	bgimage.py	/^import socket$/;"	i
stderr	bgconf.py	/^from sys import stderr$/;"	i
subprocess	bgimage.py	/^import subprocess$/;"	i
test_expand_dir	tests/test.py	/^    def test_expand_dir(self):$/;"	m	class:TestPathUtils
test_validate_path	tests/test.py	/^    def test_validate_path(self):$/;"	m	class:TestPathUtils
typecheck	bgserver.py	/^import bgtypechecker as typecheck$/;"	i
unittest	tests/test.py	/^import unittest$/;"	i
url	bgimage.py	/^from validators import url$/;"	i
url	bgserver.py	/^from validators import url$/;"	i
url	imageparsers/reddit_api.py	/^    def url(self):$/;"	m	class:RedditUrl
validate_path	pathutils.py	/^def validate_path(fn, mode, directory=False, create=True):$/;"	f
